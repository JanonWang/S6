import os
import scapy.all as scapy
import string

PKT_SIZE = int($BESS_PKT_SIZE!'64')
NUM_CONTAINERS = int($BESS_CONTAINERS!'2')
NUM_FLOWS = int($BESS_NUM_FLOwS!'65536')
NUM_VPORTS = 1
NUM_QUEUES = 1

# QEMU 2.8 supports up to 1024, older versions are hardcoded with 256
QSIZE = int($BESS_QSIZE!'2048')

bess.add_worker(wid=0, core=0)
bess.add_tc('host_to_nf', policy='round_robin', wid=0)
bess.add_tc('packet_rate', parent='host_to_nf', policy='rate_limit',
        resource='packet', limit={'packet':1000000})
bess.add_tc('nf_to_host', policy='round_robin', wid=0)

kwargs = {'num_inc_q': NUM_QUEUES,
          'num_out_q': NUM_QUEUES,
          'size_inc_q': QSIZE,
          'size_out_q': QSIZE}

os.system('sudo mkdir -p /tmp/bessd')
os.system('sudo rm -f /tmp/bessd/vhost_user*.sock')


def build_udp(size):
    eth = scapy.Ether(src='02:fe:00:00:00:01', dst='02:fe:00:00:00:02')
    ip = scapy.IP(src='10.0.0.1', dst='10.0.0.2')
    udp = scapy.UDP(sport=10001, dport=10002)
    header = eth/ip/udp
    payload = '0' * (size - len(header))
    return bytes(header/payload)


## BESS module configurations
## Randomize source IP, destinition IP addresses
src::Source() \
        -> Rewrite(templates=[build_udp(PKT_SIZE)]) \
        -> RandomUpdate(fields=[
            {'offset': 28, 'size': 2, 'min': 0, 'max': NUM_FLOWS}
            ]) \
        -> Timestamp() \
        -> lb_vm::HashLB(gates=range(NUM_CONTAINERS), mode='l3')
src.attach_task(parent='packet_rate')

measure::Measure() -> sink::Sink()

vport_id = 0
for i in range(NUM_CONTAINERS):
    v = 'v{}_{}'.format(i, vport_id)
    vdev_str = 'eth_vhost_{},iface=/tmp/bessd/vhost_user{}_{}.sock,queues={}' \
            .format(v, i, vport_id, NUM_QUEUES)
    p = PMDPort(name=v, vdev=vdev_str, num_inc_q=NUM_QUEUES, \
                num_out_q=NUM_QUEUES, size_inc_q=QSIZE, size_out_q=QSIZE)
    
    lb_vm:i -> QueueOut(port=p)
    qinc = QueueInc(port=p)
    qinc -> measure
    qinc.attach_task(parent='nf_to_host')


print('Now you can run launch_s6_instance.py')
